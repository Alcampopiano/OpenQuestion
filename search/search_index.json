{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenQuestion: A Python based open source survey platform \u00b6 OpenQuestion is an open source and developer focused platform for building surveys. Surveys can be designed using a GUI and are represented by an underlying and accessible Python dictionary. Example of survey development in OpenQuestion User Guide \u00b6 Survey Development Widget List Survey Settings Installation Advanced Usage FAQ Bug reports and Questions \u00b6 OpenQuestion is BSD-licenced and the source code is available on GitHub . For issues and questions, please use GitHub Issues . Citing OpenQuestion \u00b6 coming soon ... Contributing to OpenQuestion \u00b6 The best way to contribute to OpenQuestion is to ... For more details, please see CONTRIBUTING.md in the GitHub repository.","title":"Home"},{"location":"#openquestion-a-python-based-open-source-survey-platform","text":"OpenQuestion is an open source and developer focused platform for building surveys. Surveys can be designed using a GUI and are represented by an underlying and accessible Python dictionary. Example of survey development in OpenQuestion","title":"OpenQuestion: A Python based open source survey platform"},{"location":"#user-guide","text":"Survey Development Widget List Survey Settings Installation Advanced Usage FAQ","title":"User Guide"},{"location":"#bug-reports-and-questions","text":"OpenQuestion is BSD-licenced and the source code is available on GitHub . For issues and questions, please use GitHub Issues .","title":"Bug reports and Questions"},{"location":"#citing-openquestion","text":"coming soon ...","title":"Citing OpenQuestion"},{"location":"#contributing-to-openquestion","text":"The best way to contribute to OpenQuestion is to ... For more details, please see CONTRIBUTING.md in the GitHub repository.","title":"Contributing to OpenQuestion"},{"location":"advanced/","text":"Advanced usage \u00b6 OpenQuestion's GUI can handle standard survey development and therefore this section is only intended for more advanced use cases. Where noted, certain topics are relevent only to OpenQuestion's administrator(s). Accessing the Python Shell (for administrators) \u00b6 From the command line (where the OpenQuestion is below the current directory) run the app server with the --shell option. This will drop you into a Python interpreter that has access to OpenQuestion's priviledged code and database. anvil-app-server --app OpenQuestion --shell Accessing the Python Shell (for survey developers) \u00b6 Developers can also interact with OpenQuestion's server code and databases from Python. The administrator must first generate a token (a so-called Uplink key) and associate it with OpenQuestion as follows: anvil-app-server --app OpenQuestion --uplink-key <you-secret-key> Admins, be careful when creating an Uplink key Uplink keys should be long, secure, and random. Do not share the key with anyone except for those who you want to have access to OpenQuestion's privileged server code and databases Developers can now connect to OpenQuestion with Python code by following these steps: pip install anvil-uplink import anvil.server # connecting to OpenQuestion anvil . server . connect ( \"[uplink-key goes here]\" , url = \"ws://your-runtime-server:3030/_/uplink\" ) ` Once sucessfully connected, developers will have priviledged access to OpenQuestion's server code and databases from their Python environment. JSON representation of surveys \u00b6 OpenQuestion represents surveys as a Python dictionary (stored as a JSON object in the backend database). The following two examples show the dict representation of two surveys: one that is simple, followed by one that is more complex. By studying these structures, one can learn how to create and modify surveys programatically (also, see the sections pertaining to working with the Surveys table). In general, the survey dict is a nested, somewhat self-similar structure. For example, The survey itself contains sections (a type of widget) Sections contain the typical UI widgets (e.g., text_box, drop_down, etc) The UI widgets contain all of the properties set in the survey designer (title, placeholder, mandatory flag, branching logic, etc) Simple survey (click) my_survey = { \"title\" : \"simple survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 2 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"section\" , \"widgets\" : [ { \"id\" : 1 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"what's your name?\" , \"number\" : False , \"mandatory\" : True , \"placeholder\" : \"placeholder here\" } ] } ] } A more complex survey (click) my_survey = { \"title\" : \"science survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 22 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"About you\" , \"widgets\" : [ { \"id\" : 1 , \"text\" : \"This is a survey about **you** and **science**. \\n\\n For more information about science click [here](https://en.wikipedia.org/wiki/Science). \\n\\n - these \\n - are \\n - bullets \\n\\n This is scientifically proven to be the cutest image: \\n\\n <img src= \\\" https://i.imgur.com/gPb2phg.gif \\\" width= \\\" 191 \\\" height= \\\" 200 \\\" > \\n\\n \" , \"type\" : \"markdown\" , \"logic\" : None , \"title\" : \"\" , \"placeholder\" : \"markdown supported\" }, { \"id\" : 2 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"What is your name?\" , \"number\" : False , \"mandatory\" : False , \"placeholder\" : \"name goes here\" }, { \"id\" : 7 , \"type\" : \"date\" , \"logic\" : None , \"title\" : \"What is your date of birth?\" , \"format\" : \"%Y-%m- %d \" , \"mandatory\" : False , \"placeholder\" : \"date goes here\" }, { \"id\" : 3 , \"type\" : \"text_area\" , \"logic\" : None , \"title\" : \"Tell me about yourself\" , \"placeholder\" : \"text goes here\" }, { \"id\" : 4 , \"type\" : \"drop_down\" , \"logic\" : None , \"title\" : \"What is your highest completed educational level?\" , \"options\" : \"high school diploma \\n college diploma or university degree \\n I have do not have a high school diploma\" , \"mandatory\" : True , \"placeholder\" : \"select from here\" }, { \"id\" : 11 , \"type\" : \"radio_button\" , \"logic\" : None , \"title\" : \"Are you interested in science?\" , \"options\" : \"Yes \\n No\" } ] }, { \"id\" : 5 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"About you and science\" , \"widgets\" : [ { \"id\" : 8 , \"type\" : \"check_box\" , \"logic\" : None , \"title\" : \"Which scientific topics are you interested in? (check all that apply)\" , \"options\" : \"mathematics \\n geography \\n data science \\n statistics \\n physics \\n neuroscience\" }, { \"labels\" : \"not satisfied \\n meh \\n very satisfied\" , \"min_val\" : \"0\" , \"value\" : \"50\" , \"type\" : \"slider\" , \"title\" : \"How satisfied were you with your last science course? \" , \"id\" : 10 , \"logic\" : None , \"step\" : \"1\" , \"max_val\" : \"100\" }, { \"id\" : 12 , \"type\" : \"text_area\" , \"logic\" : { \"func\" : \"any\" , \"conditions\" : [ { \"id\" : 10 , \"title\" : \"How satisfied were you with your last science course? \" , \"value\" : 40 , \"comparison\" : \"<\" } ] }, \"title\" : \"In your opinion, what would improve science education?\" , \"placeholder\" : \"Explain here\" } ] } ] } Using the Surveys table \u00b6 The Surveys table contains all surveys that are created in OpenQuestion. Interacting with tables For more information on the the API used for interacting with tables, please see Anvil's DataTables documentation . The Surveys table has the following columns: survey_id : A long, random, secure, and unique string title : The survey title last_modified : A Python datetime object schema : A JSON representation of the survey's structure (does not contain submission data) submissions : A CSV media object which accumulates submissions opening_date : A Python datetime object for an opening date closing_date : A Python datetime object for an closing date Adding a survey \u00b6 The following example demonstrates how to programatically add a survey to the Surveys table. from anvil.tables import app_tables my_survey = { \"title\" : \"simple survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 2 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"section\" , \"widgets\" : [ { \"id\" : 1 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"what's your name?\" , \"number\" : False , \"mandatory\" : True , \"placeholder\" : \"placeholder here\" } ] } ] } app_tables . surveys . add_row ( survey_id = 'you secure survey ID' , # A long, random, secure, and unique string title = 'simple survey' , schema = my_survey , # A Python dictionary following OpenQuestion's expected format submissions = None , opening_date = None , closing_date = None ) Deleting a survey \u00b6 The following example demonstrates how to programatically delete a survey from the Surveys table. from anvil.tables import app_tables # Searching based on title property but any other search parameter can be used. # See Anvil's Datatable documentation https://anvil.works/docs/data-tables/data-tables-in-code row = app_tables . surveys . get ( title = 'simple survey' ) row . delete () Modifying a survey \u00b6 The following example demonstrates how to programatically modify a survey from the Surveys table. from anvil.tables import app_tables row = app_tables . surveys . get ( title = 'simple survey' ) # modifying the survey's title row [ 'title' ] = 'My new title' Using the Users table \u00b6 OpenQuestion stores developer and administrator information in the Users table. Note that users in this case refers to survey developers and app admins (not end users who fill out the survey). Adding a user \u00b6 Please see this section on adding developers and admins as users in OpenQuestion. Deleting a user \u00b6 Users can be deleted from the Users table as follows: # get a user from the Users table some_user = app_tables . users . get ( email = 'your_username@example.com' ) some_user . delete () Adding data to submissions using query strings: \u00b6 OpenQuestion allows survey developers to add additional data to a submission by accepting a query string in the survey's URL. For example, in addition to the form's ID, the following survey passes foo=42 , along with the data that is inputted by an end user, to the submissions table. https://your-app-url/#?form_id=<uuid>&foo=42 This example uses a long query string. That is, it also passes bar=baz to the submission's table. https://your-app-url/#?form_id=<uuid>&foo=42&bar=baz When an end user submits a response a new column is created for every parameter in the query string and the new row in the submissions table will contain the value(s). When a parameter matches an existing column header in the submissions table, the parameter's value is merged (a new column is not created). Note that query strings can be unique to each submission since new paramerters are added as new columns.","title":"Advanced"},{"location":"advanced/#advanced-usage","text":"OpenQuestion's GUI can handle standard survey development and therefore this section is only intended for more advanced use cases. Where noted, certain topics are relevent only to OpenQuestion's administrator(s).","title":"Advanced usage"},{"location":"advanced/#accessing-the-python-shell-for-administrators","text":"From the command line (where the OpenQuestion is below the current directory) run the app server with the --shell option. This will drop you into a Python interpreter that has access to OpenQuestion's priviledged code and database. anvil-app-server --app OpenQuestion --shell","title":"Accessing the Python Shell (for administrators)"},{"location":"advanced/#accessing-the-python-shell-for-survey-developers","text":"Developers can also interact with OpenQuestion's server code and databases from Python. The administrator must first generate a token (a so-called Uplink key) and associate it with OpenQuestion as follows: anvil-app-server --app OpenQuestion --uplink-key <you-secret-key> Admins, be careful when creating an Uplink key Uplink keys should be long, secure, and random. Do not share the key with anyone except for those who you want to have access to OpenQuestion's privileged server code and databases Developers can now connect to OpenQuestion with Python code by following these steps: pip install anvil-uplink import anvil.server # connecting to OpenQuestion anvil . server . connect ( \"[uplink-key goes here]\" , url = \"ws://your-runtime-server:3030/_/uplink\" ) ` Once sucessfully connected, developers will have priviledged access to OpenQuestion's server code and databases from their Python environment.","title":"Accessing the Python Shell (for survey developers)"},{"location":"advanced/#json-representation-of-surveys","text":"OpenQuestion represents surveys as a Python dictionary (stored as a JSON object in the backend database). The following two examples show the dict representation of two surveys: one that is simple, followed by one that is more complex. By studying these structures, one can learn how to create and modify surveys programatically (also, see the sections pertaining to working with the Surveys table). In general, the survey dict is a nested, somewhat self-similar structure. For example, The survey itself contains sections (a type of widget) Sections contain the typical UI widgets (e.g., text_box, drop_down, etc) The UI widgets contain all of the properties set in the survey designer (title, placeholder, mandatory flag, branching logic, etc) Simple survey (click) my_survey = { \"title\" : \"simple survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 2 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"section\" , \"widgets\" : [ { \"id\" : 1 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"what's your name?\" , \"number\" : False , \"mandatory\" : True , \"placeholder\" : \"placeholder here\" } ] } ] } A more complex survey (click) my_survey = { \"title\" : \"science survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 22 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"About you\" , \"widgets\" : [ { \"id\" : 1 , \"text\" : \"This is a survey about **you** and **science**. \\n\\n For more information about science click [here](https://en.wikipedia.org/wiki/Science). \\n\\n - these \\n - are \\n - bullets \\n\\n This is scientifically proven to be the cutest image: \\n\\n <img src= \\\" https://i.imgur.com/gPb2phg.gif \\\" width= \\\" 191 \\\" height= \\\" 200 \\\" > \\n\\n \" , \"type\" : \"markdown\" , \"logic\" : None , \"title\" : \"\" , \"placeholder\" : \"markdown supported\" }, { \"id\" : 2 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"What is your name?\" , \"number\" : False , \"mandatory\" : False , \"placeholder\" : \"name goes here\" }, { \"id\" : 7 , \"type\" : \"date\" , \"logic\" : None , \"title\" : \"What is your date of birth?\" , \"format\" : \"%Y-%m- %d \" , \"mandatory\" : False , \"placeholder\" : \"date goes here\" }, { \"id\" : 3 , \"type\" : \"text_area\" , \"logic\" : None , \"title\" : \"Tell me about yourself\" , \"placeholder\" : \"text goes here\" }, { \"id\" : 4 , \"type\" : \"drop_down\" , \"logic\" : None , \"title\" : \"What is your highest completed educational level?\" , \"options\" : \"high school diploma \\n college diploma or university degree \\n I have do not have a high school diploma\" , \"mandatory\" : True , \"placeholder\" : \"select from here\" }, { \"id\" : 11 , \"type\" : \"radio_button\" , \"logic\" : None , \"title\" : \"Are you interested in science?\" , \"options\" : \"Yes \\n No\" } ] }, { \"id\" : 5 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"About you and science\" , \"widgets\" : [ { \"id\" : 8 , \"type\" : \"check_box\" , \"logic\" : None , \"title\" : \"Which scientific topics are you interested in? (check all that apply)\" , \"options\" : \"mathematics \\n geography \\n data science \\n statistics \\n physics \\n neuroscience\" }, { \"labels\" : \"not satisfied \\n meh \\n very satisfied\" , \"min_val\" : \"0\" , \"value\" : \"50\" , \"type\" : \"slider\" , \"title\" : \"How satisfied were you with your last science course? \" , \"id\" : 10 , \"logic\" : None , \"step\" : \"1\" , \"max_val\" : \"100\" }, { \"id\" : 12 , \"type\" : \"text_area\" , \"logic\" : { \"func\" : \"any\" , \"conditions\" : [ { \"id\" : 10 , \"title\" : \"How satisfied were you with your last science course? \" , \"value\" : 40 , \"comparison\" : \"<\" } ] }, \"title\" : \"In your opinion, what would improve science education?\" , \"placeholder\" : \"Explain here\" } ] } ] }","title":"JSON representation of surveys"},{"location":"advanced/#using-the-surveys-table","text":"The Surveys table contains all surveys that are created in OpenQuestion. Interacting with tables For more information on the the API used for interacting with tables, please see Anvil's DataTables documentation . The Surveys table has the following columns: survey_id : A long, random, secure, and unique string title : The survey title last_modified : A Python datetime object schema : A JSON representation of the survey's structure (does not contain submission data) submissions : A CSV media object which accumulates submissions opening_date : A Python datetime object for an opening date closing_date : A Python datetime object for an closing date","title":"Using the Surveys table"},{"location":"advanced/#adding-a-survey","text":"The following example demonstrates how to programatically add a survey to the Surveys table. from anvil.tables import app_tables my_survey = { \"title\" : \"simple survey\" , \"settings\" : { \"survey_color\" : \"#2196F3\" , \"thank_you_msg\" : \"#Thank you!\" }, \"num_widgets\" : 2 , \"widgets\" : [ { \"id\" : 0 , \"type\" : \"section\" , \"logic\" : None , \"title\" : \"section\" , \"widgets\" : [ { \"id\" : 1 , \"type\" : \"text_box\" , \"logic\" : None , \"title\" : \"what's your name?\" , \"number\" : False , \"mandatory\" : True , \"placeholder\" : \"placeholder here\" } ] } ] } app_tables . surveys . add_row ( survey_id = 'you secure survey ID' , # A long, random, secure, and unique string title = 'simple survey' , schema = my_survey , # A Python dictionary following OpenQuestion's expected format submissions = None , opening_date = None , closing_date = None )","title":"Adding a survey"},{"location":"advanced/#deleting-a-survey","text":"The following example demonstrates how to programatically delete a survey from the Surveys table. from anvil.tables import app_tables # Searching based on title property but any other search parameter can be used. # See Anvil's Datatable documentation https://anvil.works/docs/data-tables/data-tables-in-code row = app_tables . surveys . get ( title = 'simple survey' ) row . delete ()","title":"Deleting a survey"},{"location":"advanced/#modifying-a-survey","text":"The following example demonstrates how to programatically modify a survey from the Surveys table. from anvil.tables import app_tables row = app_tables . surveys . get ( title = 'simple survey' ) # modifying the survey's title row [ 'title' ] = 'My new title'","title":"Modifying a survey"},{"location":"advanced/#using-the-users-table","text":"OpenQuestion stores developer and administrator information in the Users table. Note that users in this case refers to survey developers and app admins (not end users who fill out the survey).","title":"Using the Users table"},{"location":"advanced/#adding-a-user","text":"Please see this section on adding developers and admins as users in OpenQuestion.","title":"Adding a user"},{"location":"advanced/#deleting-a-user","text":"Users can be deleted from the Users table as follows: # get a user from the Users table some_user = app_tables . users . get ( email = 'your_username@example.com' ) some_user . delete ()","title":"Deleting a user"},{"location":"advanced/#adding-data-to-submissions-using-query-strings","text":"OpenQuestion allows survey developers to add additional data to a submission by accepting a query string in the survey's URL. For example, in addition to the form's ID, the following survey passes foo=42 , along with the data that is inputted by an end user, to the submissions table. https://your-app-url/#?form_id=<uuid>&foo=42 This example uses a long query string. That is, it also passes bar=baz to the submission's table. https://your-app-url/#?form_id=<uuid>&foo=42&bar=baz When an end user submits a response a new column is created for every parameter in the query string and the new row in the submissions table will contain the value(s). When a parameter matches an existing column header in the submissions table, the parameter's value is merged (a new column is not created). Note that query strings can be unique to each submission since new paramerters are added as new columns.","title":"Adding data to submissions using query strings:"},{"location":"faq/","text":"FAQ \u00b6 Suggestions for FAQs are welcome. Please submit these to OpenQuestion's issues page on GitHub . How do I download submissions for a survey? \u00b6 In the survey dashboard click the icon. How do I get a shareable URL for survey? \u00b6 In the survey dashboard click the icon. Is it possible to have a specific URL for each end user? \u00b6 This sounds like a good job for query strings . Just design your URLs with the desired parameters and OpenQuestion will merge and/or add any additional data to each submission. Are matrix-type widgets available? \u00b6 Not yet! But requests are welcome on OpenQuestion's issues page on GitHub. For now, one would have to flatten out items into multiple widgets \u2639\ufe0f. How do I add an image/GIF to my markdown widget? \u00b6 markdown widgets support web-hosted images. This means that any publically hosted image address should work with the usual Markdown syntax. For example, ![img](https://i.imgur.com/kZ9piPH.gif) leads to this (from Imgur): Can I add a header/footer to my survey? \u00b6 Yes, well, sort of. One way to accomplish this would be to add the desired image to your survey using a markdown widget . Note that currently OpenQuestion only supports a single page survey. Can I split my survey into separate pages? \u00b6 Currently OpenQuestion only supports a single page survey. Section widgets are used to visually delimit groupings of widgets but they are still presented on the same page. This feature will be likely be implemented in a future release. Can I perform data analysis and/or visualization in OpenQuestion? \u00b6 Not at the moment and likely it will stay that way. Originally, OpenQuestion included a so-called reporting module that allowed developers to add VegaLite specs and markdown widgets to a notebook-like web page to demonstrate their findings. The reporting module still exists but is has been turned off to reduce the scope of this project. If fast and powerful metrics and visualizations are needed, there are many existing tools that do this far better than OpenQuestion ever could \ud83d\ude03. For example, please see Altair , Jupyter , and Deepnote . Can I change the color of a survey? \u00b6 Yes, please see this part of the settings page. Can I change the default authentication services (for admins)? \u00b6 Survey developers must authenticate into OpenQuestion. Various authentication options are available and can be configured by editing the file \"anvil.yaml\" located at the top level of OpenQuestion. Inside that file you will see the following section: client_config : { allow_signup : false , enable_automatically : false , use_email : true , confirm_email : false , use_microsoft : true , require_secure_passwords : true } By default, OpenQuestion includes the entries use_email: true and use_microsoft: true (described below). You can remove these entries or set them to false if you would like to remove them as authentication options in OpenQuestion. The available authentication options are as follows: use_email: true/false . Authenticate with an email address and password. Developers have to be added as registered users as described here use_microsoft: true/false . Authenticate with Microsoft. use_google: true/false . Authenticate with Google. use_facebook: true/false . Authenticate with Facebook. use_token: true/false . Users sign in by following a link in their email. Developers have to be added as registered users as described here For more information on the above options in OpenQuestion, please see Anvil's documentation on authentication .","title":"FAQ"},{"location":"faq/#faq","text":"Suggestions for FAQs are welcome. Please submit these to OpenQuestion's issues page on GitHub .","title":"FAQ"},{"location":"faq/#how-do-i-download-submissions-for-a-survey","text":"In the survey dashboard click the icon.","title":"How do I download submissions for a survey?"},{"location":"faq/#how-do-i-get-a-shareable-url-for-survey","text":"In the survey dashboard click the icon.","title":"How do I get a shareable URL for survey?"},{"location":"faq/#is-it-possible-to-have-a-specific-url-for-each-end-user","text":"This sounds like a good job for query strings . Just design your URLs with the desired parameters and OpenQuestion will merge and/or add any additional data to each submission.","title":"Is it possible to have a specific URL for each end user?"},{"location":"faq/#are-matrix-type-widgets-available","text":"Not yet! But requests are welcome on OpenQuestion's issues page on GitHub. For now, one would have to flatten out items into multiple widgets \u2639\ufe0f.","title":"Are matrix-type widgets available?"},{"location":"faq/#how-do-i-add-an-imagegif-to-my-markdown-widget","text":"markdown widgets support web-hosted images. This means that any publically hosted image address should work with the usual Markdown syntax. For example, ![img](https://i.imgur.com/kZ9piPH.gif) leads to this (from Imgur):","title":"How do I add an image/GIF to my markdown widget?"},{"location":"faq/#can-i-add-a-headerfooter-to-my-survey","text":"Yes, well, sort of. One way to accomplish this would be to add the desired image to your survey using a markdown widget . Note that currently OpenQuestion only supports a single page survey.","title":"Can I add a header/footer to my survey?"},{"location":"faq/#can-i-split-my-survey-into-separate-pages","text":"Currently OpenQuestion only supports a single page survey. Section widgets are used to visually delimit groupings of widgets but they are still presented on the same page. This feature will be likely be implemented in a future release.","title":"Can I split my survey into separate pages?"},{"location":"faq/#can-i-perform-data-analysis-andor-visualization-in-openquestion","text":"Not at the moment and likely it will stay that way. Originally, OpenQuestion included a so-called reporting module that allowed developers to add VegaLite specs and markdown widgets to a notebook-like web page to demonstrate their findings. The reporting module still exists but is has been turned off to reduce the scope of this project. If fast and powerful metrics and visualizations are needed, there are many existing tools that do this far better than OpenQuestion ever could \ud83d\ude03. For example, please see Altair , Jupyter , and Deepnote .","title":"Can I perform data analysis and/or visualization in OpenQuestion?"},{"location":"faq/#can-i-change-the-color-of-a-survey","text":"Yes, please see this part of the settings page.","title":"Can I change the color of a survey?"},{"location":"faq/#can-i-change-the-default-authentication-services-for-admins","text":"Survey developers must authenticate into OpenQuestion. Various authentication options are available and can be configured by editing the file \"anvil.yaml\" located at the top level of OpenQuestion. Inside that file you will see the following section: client_config : { allow_signup : false , enable_automatically : false , use_email : true , confirm_email : false , use_microsoft : true , require_secure_passwords : true } By default, OpenQuestion includes the entries use_email: true and use_microsoft: true (described below). You can remove these entries or set them to false if you would like to remove them as authentication options in OpenQuestion. The available authentication options are as follows: use_email: true/false . Authenticate with an email address and password. Developers have to be added as registered users as described here use_microsoft: true/false . Authenticate with Microsoft. use_google: true/false . Authenticate with Google. use_facebook: true/false . Authenticate with Facebook. use_token: true/false . Users sign in by following a link in their email. Developers have to be added as registered users as described here For more information on the above options in OpenQuestion, please see Anvil's documentation on authentication .","title":"Can I change the default authentication services (for admins)?"},{"location":"installation/","text":"Installation \u00b6 OpenQuestion is available from the Python Package Index and can be installed using pip . pip install OpenQuestion Adding developers and administrators as users \u00b6 Before OpenQuestion's GUI can be used, survey developers and app administrators must be added as registered users to the app's database. This is described in the following sections (click here for more information on the available authentication services). From the command line (where the OpenQuestion is below the current directory) run the app server with the --shell option. This will drop you into a Python interpreter that is connected to OpenQuestion's database. anvil-app-server --app OpenQuestion --shell Now add a user (i.e., a survey developer and/or app administrator) and, depending on the desired authentication service, set a password. # add a new row to the Users table new_user = app_tables . users . add_row ( email = 'your_username@example.com' , enabled = True ) # these steps are not needed if using Google or Microsoft Authentication import bcrypt password_hash = bcrypt . hashpw ( b 'new password' , bcrypt . gensalt ( 16 )) new_user [ 'password_hash' ] = password_hash . decode () Launching OpenQuestion \u00b6 Now that OpenQuestion has been installed, there are one or more valid users (i.e., developers and admins), the following command will launch the app which will prompt the user for their authentication details associated with the previous step. anvil-app-server --app OpenQuestion Cloud deployment \u00b6 OpenQuestion is built using the open source Anvil App Server . If you would like more information on how to deploy OpenQuestion on the cloud, Anvil has put together excellent how-to guides: Amazon Lightsail Microsoft Azure DigitalOcean Droplet Google Compute Engine Linode","title":"Installation"},{"location":"installation/#installation","text":"OpenQuestion is available from the Python Package Index and can be installed using pip . pip install OpenQuestion","title":"Installation"},{"location":"installation/#adding-developers-and-administrators-as-users","text":"Before OpenQuestion's GUI can be used, survey developers and app administrators must be added as registered users to the app's database. This is described in the following sections (click here for more information on the available authentication services). From the command line (where the OpenQuestion is below the current directory) run the app server with the --shell option. This will drop you into a Python interpreter that is connected to OpenQuestion's database. anvil-app-server --app OpenQuestion --shell Now add a user (i.e., a survey developer and/or app administrator) and, depending on the desired authentication service, set a password. # add a new row to the Users table new_user = app_tables . users . add_row ( email = 'your_username@example.com' , enabled = True ) # these steps are not needed if using Google or Microsoft Authentication import bcrypt password_hash = bcrypt . hashpw ( b 'new password' , bcrypt . gensalt ( 16 )) new_user [ 'password_hash' ] = password_hash . decode ()","title":"Adding developers and administrators as users"},{"location":"installation/#launching-openquestion","text":"Now that OpenQuestion has been installed, there are one or more valid users (i.e., developers and admins), the following command will launch the app which will prompt the user for their authentication details associated with the previous step. anvil-app-server --app OpenQuestion","title":"Launching OpenQuestion"},{"location":"installation/#cloud-deployment","text":"OpenQuestion is built using the open source Anvil App Server . If you would like more information on how to deploy OpenQuestion on the cloud, Anvil has put together excellent how-to guides: Amazon Lightsail Microsoft Azure DigitalOcean Droplet Google Compute Engine Linode","title":"Cloud deployment"},{"location":"settings/","text":"Survey settings \u00b6 Each Survey has its own settings and these can be accessed through the survey dashboard by clicking the icon. Survey settings Opening and closing dates \u00b6 The opening and closing dates can be chosen by selecting a date and time from the \"date picker\" elements. If a date option is left blank, there is no restriction on the corresponding field. Thank you message \u00b6 The text area allows you to write markdown to express a \"thank you message\". The message will appear after the survey has been submitted by the user. Survey color \u00b6 You can change the main color of the end user's survey by entering a hex code (e.g., #2196F3) This will not affect the color in the survey designer. Deleting a survey \u00b6 The big red button allows a survey to be deleted. A confirmation dialogue will pop up just to be safe. Deleting a survey? Be careful! Once a survey is deleted, its structure and associated data cannot be restored; however, if you have the JSON representation of your survey saved on your local computer, you can restore the survey structure using the command line feature .","title":"Settings"},{"location":"settings/#survey-settings","text":"Each Survey has its own settings and these can be accessed through the survey dashboard by clicking the icon. Survey settings","title":"Survey settings"},{"location":"settings/#opening-and-closing-dates","text":"The opening and closing dates can be chosen by selecting a date and time from the \"date picker\" elements. If a date option is left blank, there is no restriction on the corresponding field.","title":"Opening and closing dates"},{"location":"settings/#thank-you-message","text":"The text area allows you to write markdown to express a \"thank you message\". The message will appear after the survey has been submitted by the user.","title":"Thank you message"},{"location":"settings/#survey-color","text":"You can change the main color of the end user's survey by entering a hex code (e.g., #2196F3) This will not affect the color in the survey designer.","title":"Survey color"},{"location":"settings/#deleting-a-survey","text":"The big red button allows a survey to be deleted. A confirmation dialogue will pop up just to be safe. Deleting a survey? Be careful! Once a survey is deleted, its structure and associated data cannot be restored; however, if you have the JSON representation of your survey saved on your local computer, you can restore the survey structure using the command line feature .","title":"Deleting a survey"},{"location":"survey_dev/","text":"Survey Development \u00b6 Survey dashboard \u00b6 The survey dashboard allows you to edit, build, and configure settings for your surveys. Survey data and share links can also be accessed from the dashboard. Clicking \"New survey\" or the icon will take you to the survey designer (explained below) for a new or existing survey, respectively. The survey dashboard Survey designer \u00b6 The survey designer is where most of the survey development takes place. It consists of the designer toolbar (click on the to toggle the side panel's visibility) and various other UI elements, including those that allow you to structure your survey and control how it behaves. To preview the survey as the end user would see it, click \"Preview\" at the top of the page (or access the share link from the dashboard). The survey designer Designer toolbar \u00b6 The designer toolbar contains widgets (e.g., text_box, drop_down, sections, etc). Clicking on the widgets adds them to the page below the currently selected element. The icon will toggle the toolbar's visibility. The designer toolbar Widget settings \u00b6 When a widget is added to the page during survey development, values need to be specified to control how the widget appears to the end user. For example, the text_box widget requires the following information: title . The label displayed on this widget. For example, \"What is your name?\" placeholder . Text that prompts the user. For example, \"Type your name here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted number . If checked, this field will be restricted to a number The following example shows the designer representation of the text_box as well as what the end user sees. Designer Survey All widgets have their own sets of options to be specified. Please click here to learn about the available widgets and how they are used. Are widget settings represented as key/value pairs? Yes! In fact, all survey settings are represented by an underlying and accessible JSON/Python dict where keys and values corresspond exactly to what is shown in the designer Widget toolbar \u00b6 Once a widget has been added to the page, the widget's toolbar can be used to move the widget up or down, delete the widget, and control the widget's visibility with branching . The widget toolbar Basic Widget controls \u00b6 The sign can be used to delete the widget and the up/down arrows can be used to move the widget up or down. Branching \u00b6 The icon opens up the branching UI. Branching controls the visibility of the selected widgets (including sections) based on the values of other widgets. Multiple conditions can be combined together to make complex branching rules if needed. The below example shows a text_box widget's visibility being controlled by the value of a slider widget. In this case, whenever the slider goes below 40, the text_box is displayed. When branching exists on a widget, the icon on the widget's toolbar is highlighted. Setting branching rules on a text_box The text_box is revealed when the condition is met","title":"Survey Development"},{"location":"survey_dev/#survey-development","text":"","title":"Survey Development"},{"location":"survey_dev/#survey-dashboard","text":"The survey dashboard allows you to edit, build, and configure settings for your surveys. Survey data and share links can also be accessed from the dashboard. Clicking \"New survey\" or the icon will take you to the survey designer (explained below) for a new or existing survey, respectively. The survey dashboard","title":"Survey dashboard"},{"location":"survey_dev/#survey-designer","text":"The survey designer is where most of the survey development takes place. It consists of the designer toolbar (click on the to toggle the side panel's visibility) and various other UI elements, including those that allow you to structure your survey and control how it behaves. To preview the survey as the end user would see it, click \"Preview\" at the top of the page (or access the share link from the dashboard). The survey designer","title":"Survey designer"},{"location":"survey_dev/#designer-toolbar","text":"The designer toolbar contains widgets (e.g., text_box, drop_down, sections, etc). Clicking on the widgets adds them to the page below the currently selected element. The icon will toggle the toolbar's visibility. The designer toolbar","title":"Designer toolbar"},{"location":"survey_dev/#widget-settings","text":"When a widget is added to the page during survey development, values need to be specified to control how the widget appears to the end user. For example, the text_box widget requires the following information: title . The label displayed on this widget. For example, \"What is your name?\" placeholder . Text that prompts the user. For example, \"Type your name here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted number . If checked, this field will be restricted to a number The following example shows the designer representation of the text_box as well as what the end user sees. Designer Survey All widgets have their own sets of options to be specified. Please click here to learn about the available widgets and how they are used. Are widget settings represented as key/value pairs? Yes! In fact, all survey settings are represented by an underlying and accessible JSON/Python dict where keys and values corresspond exactly to what is shown in the designer","title":"Widget settings"},{"location":"survey_dev/#widget-toolbar","text":"Once a widget has been added to the page, the widget's toolbar can be used to move the widget up or down, delete the widget, and control the widget's visibility with branching . The widget toolbar","title":"Widget toolbar"},{"location":"survey_dev/#basic-widget-controls","text":"The sign can be used to delete the widget and the up/down arrows can be used to move the widget up or down.","title":"Basic Widget controls"},{"location":"survey_dev/#branching","text":"The icon opens up the branching UI. Branching controls the visibility of the selected widgets (including sections) based on the values of other widgets. Multiple conditions can be combined together to make complex branching rules if needed. The below example shows a text_box widget's visibility being controlled by the value of a slider widget. In this case, whenever the slider goes below 40, the text_box is displayed. When branching exists on a widget, the icon on the widget's toolbar is highlighted. Setting branching rules on a text_box The text_box is revealed when the condition is met","title":"Branching"},{"location":"widgets/","text":"Widget list \u00b6 This section describes the available widgets and their options. The following examples show the designer version of the widget as well as an example of what the end user sees. Widget icons When a widget is added to the designer, it's associated icon can be seen in the top right corner of the widget area (not shown here). This makes it easier to see which kinds of widgets have been added to the page since OpenQuestion uses different interfaces for survey development and end user data acquisition. text_box \u00b6 The text_box is used for short text or number responses. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your name?\" placeholder . Text that prompts the user. For example, \"Type your name here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted number . If checked, this field will be restricted to a number Designer Survey text_area \u00b6 The text_area widget is used for long, possibly multi-line text responses. It can be configured with the following options: title . The label displayed on this widget. For example, \"Tell me about yourself?\" placeholder . Text that prompts the user. For example, \"text goes here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey drop_down \u00b6 The drop_down widget is used for selecting from a set of categories. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your highest completed educational level?\" placeholder . Text that prompts the user. For example, \"select from here?\" options . Newline separated list of options to be displayed in the drop down mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey check_box \u00b6 The check_box component is used for selecting from a set of options where more than one option can be selected at the same time. It can be configured with the following options: title . The label displayed on this widget. For example, \"Which scientific topics are you interested in?\" options . Newline separated list of options Designer Survey radio_button \u00b6 The radio_button component is used for selecting from a set of options where only one option can be selected at a same time. It can be configured with the following options: title . The label displayed on this widget. For example, \"Are you interested in science?\" options . Newline separated list of options Designer Survey date \u00b6 The date widget is used for selecting dates from a \"date picker\" interface. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your date of birth?\" placeholder . Text that prompts the user. For example, \"date goes here?\" format . Date format string based on these directives . For example, %Y-%m-%d yields 2021-01-11 in terms of the format. mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey slider \u00b6 The slider widget is used for choosing a quantitative value from a range. It can be configured with the following options: title . The label displayed on this widget. For example, \"How satisfied were you with your last science course?\" min_val . The minimum value shown on the slider max_val . The maximum value shown on the slider step . The number of discrete steps that the slider \"thumb\" can occupy between the min and max values (inclusive) value . The initial value of the slider \"thumb\" labels . Newline seperated text labels that will be evenly spread across the width of the slider widget Designer Survey markdown \u00b6 The markdown component is used for blocks of rich text, including links, images, gifs, bullet points, raw HTML, and more. It can be configured with the following option: text . The markdown text based on the mistune parser Designer Survey section \u00b6 The section widget is used to hold other widgets and give a visual separation of sets of widgets (within a single page). Sections have their own title which can be set in the \"title\" field which is the label (e.g., \"Contact information\"). Note that OpenQuestion does not yet support multi-page surveys. Widget IDs Each widget that is added to the page is also assigned an ID. This can be ignored as it is mainly used internally (although, IDs can disambiguate widgets that have been given the same title, especially in the branching interface). Are widget settings represented as key/value pairs? Yes! In fact, all survey settings are represented by an underlying and accessible JSON/Python dict where keys and values correspond exactly to what is shown in the designer","title":"Widgets"},{"location":"widgets/#widget-list","text":"This section describes the available widgets and their options. The following examples show the designer version of the widget as well as an example of what the end user sees. Widget icons When a widget is added to the designer, it's associated icon can be seen in the top right corner of the widget area (not shown here). This makes it easier to see which kinds of widgets have been added to the page since OpenQuestion uses different interfaces for survey development and end user data acquisition.","title":"Widget list"},{"location":"widgets/#text_box","text":"The text_box is used for short text or number responses. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your name?\" placeholder . Text that prompts the user. For example, \"Type your name here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted number . If checked, this field will be restricted to a number Designer Survey","title":"text_box"},{"location":"widgets/#text_area","text":"The text_area widget is used for long, possibly multi-line text responses. It can be configured with the following options: title . The label displayed on this widget. For example, \"Tell me about yourself?\" placeholder . Text that prompts the user. For example, \"text goes here?\" mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey","title":"text_area"},{"location":"widgets/#drop_down","text":"The drop_down widget is used for selecting from a set of categories. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your highest completed educational level?\" placeholder . Text that prompts the user. For example, \"select from here?\" options . Newline separated list of options to be displayed in the drop down mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey","title":"drop_down"},{"location":"widgets/#check_box","text":"The check_box component is used for selecting from a set of options where more than one option can be selected at the same time. It can be configured with the following options: title . The label displayed on this widget. For example, \"Which scientific topics are you interested in?\" options . Newline separated list of options Designer Survey","title":"check_box"},{"location":"widgets/#radio_button","text":"The radio_button component is used for selecting from a set of options where only one option can be selected at a same time. It can be configured with the following options: title . The label displayed on this widget. For example, \"Are you interested in science?\" options . Newline separated list of options Designer Survey","title":"radio_button"},{"location":"widgets/#date","text":"The date widget is used for selecting dates from a \"date picker\" interface. It can be configured with the following options: title . The label displayed on this widget. For example, \"What is your date of birth?\" placeholder . Text that prompts the user. For example, \"date goes here?\" format . Date format string based on these directives . For example, %Y-%m-%d yields 2021-01-11 in terms of the format. mandatory flag . If checked, this field must be filled out by the user before the survey can be submitted Designer Survey","title":"date"},{"location":"widgets/#slider","text":"The slider widget is used for choosing a quantitative value from a range. It can be configured with the following options: title . The label displayed on this widget. For example, \"How satisfied were you with your last science course?\" min_val . The minimum value shown on the slider max_val . The maximum value shown on the slider step . The number of discrete steps that the slider \"thumb\" can occupy between the min and max values (inclusive) value . The initial value of the slider \"thumb\" labels . Newline seperated text labels that will be evenly spread across the width of the slider widget Designer Survey","title":"slider"},{"location":"widgets/#markdown","text":"The markdown component is used for blocks of rich text, including links, images, gifs, bullet points, raw HTML, and more. It can be configured with the following option: text . The markdown text based on the mistune parser Designer Survey","title":"markdown"},{"location":"widgets/#section","text":"The section widget is used to hold other widgets and give a visual separation of sets of widgets (within a single page). Sections have their own title which can be set in the \"title\" field which is the label (e.g., \"Contact information\"). Note that OpenQuestion does not yet support multi-page surveys. Widget IDs Each widget that is added to the page is also assigned an ID. This can be ignored as it is mainly used internally (although, IDs can disambiguate widgets that have been given the same title, especially in the branching interface). Are widget settings represented as key/value pairs? Yes! In fact, all survey settings are represented by an underlying and accessible JSON/Python dict where keys and values correspond exactly to what is shown in the designer","title":"section"}]}